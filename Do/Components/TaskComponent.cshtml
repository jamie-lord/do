@using Models;

<div class="list-group-item">
    <div class="container-fluid">
        <div class="row">
            @if (Project != TaskList.CompletedTasks)
            {
                <div class="col-md-auto my-auto col-leading">
                    <button class="btn btn-complete btn-collapsible" onclick="@(() => { Complete?.Invoke(Task); })">
                        <i class="fas fa-check"></i> <span>Complete</span>
                    </button>
                </div>
            }

            <div class="col">
                <p style="margin-bottom: 0;">
                    @if (!string.IsNullOrWhiteSpace(Task.Priority))
                    {
                        <span class="badge badge-primary">@Task.Priority</span>
                    }
                    @Task.Body
                </p>
                <p class="task-meta">
                    <small>
                        @Task.Creation?.ToString("yyyy-MM-dd")
                        @if (Task.Context != null && Task.Context.Count > 0)
                        {
                            foreach (var context in Task.Context.OrderBy(x => x))
                            {
                                <span class="badge badge-secondary">@context</span>
                            }
                        }
                    </small>
                </p>
            </div>

            <div class="col-md-auto my-auto col-trailing">

                <div class="dropleft">
                    <button type="button" class="btn btn-task-options" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <div class="dropdown-menu">
                        @if (Project == TaskList.CompletedTasks)
                        {
                            <button class="dropdown-item" onclick="@(() => { Incomplete?.Invoke(Task); })">
                                <i class="fas fa-redo"></i> Restart
                            </button>
                        }
                        <button class="dropdown-item" onclick="@(() => { Edit?.Invoke(Task); })">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="dropdown-item" onclick="@(() => { Delete?.Invoke(Task); })">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
[Parameter]
private TaskItem Task { get; set; }

[Parameter]
private string Project { get; set; }

[Parameter]
private Action<TaskItem> Complete { get; set; }

[Parameter]
private Action<TaskItem> Incomplete { get; set; }

[Parameter]
private Action<TaskItem> Edit { get; set; }

[Parameter]
private Action<TaskItem> Delete { get; set; }
}