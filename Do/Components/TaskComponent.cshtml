@using Models;
@using Services;

<div class="list-group-item @TaskContextualClass">
    <div class="container-fluid">
        <div class="row">
            @if (Project != TaskService.CompletedTasks)
            {
                <div class="col-md-auto my-auto col-leading">
                    <button class="btn btn-complete btn-collapsible" onclick="@(() => { Complete?.Invoke(Task); })">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            }

            <div class="col">
                <p style="margin-bottom: 0;">
                    @if (!string.IsNullOrWhiteSpace(Task.Priority))
                    {
                        switch (Task.Priority)
                        {
                            case "A":
                                <span class="badge badge-danger">@Task.Priority</span>
                                break;
                            case "B":
                                <span class="badge badge-warning">@Task.Priority</span>
                                break;
                            case "C":
                                <span class="badge badge-info">@Task.Priority</span>
                                break;
                            case "D":
                                <span class="badge badge-primary">@Task.Priority</span>
                                break;
                            default:
                                <span class="badge badge-secondary">@Task.Priority</span>
                                break;
                        }
                    }
                    @Task.Body
                </p>
                <p class="task-meta">
                    <small>
                        @Task.Creation?.ToString("yyyy-MM-dd")
                        @if (Task.Context != null && Task.Context.Count > 0)
                        {
                            foreach (var context in Task.Context.OrderBy(x => x))
                            {
                                <span class="badge badge-secondary">@context</span>
                            }
                        }
                    </small>
                </p>
            </div>

            <div class="col-md-auto my-auto col-trailing">

                <div class="dropleft">
                    <button type="button" class="btn btn-task-options" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <div class="dropdown-menu">
                        <h6 class="dropdown-header">Priority</h6>
                        @if (Task.Priority != "A")
                        {
                            <button class="dropdown-item" onclick="@(() => { Priority?.Invoke((Task, "A")); })">
                                <span class="badge badge-danger">A</span>
                            </button>
                        }
                        @if (Task.Priority != "B")
                        {
                            <button class="dropdown-item" onclick="@(() => { Priority?.Invoke((Task, "B")); })">
                                <span class="badge badge-warning">B</span>
                            </button>
                        }
                        @if (Task.Priority != "C")
                        {
                            <button class="dropdown-item" onclick="@(() => { Priority?.Invoke((Task, "C")); })">
                                <span class="badge badge-info">C</span>
                            </button>
                        }
                        @if (Task.Priority != "D")
                        {
                            <button class="dropdown-item" onclick="@(() => { Priority?.Invoke((Task, "D")); })">
                                <span class="badge badge-primary">D</span>
                            </button>
                        }
                        @if (Task.Priority != null)
                        {
                            <button class="dropdown-item" onclick="@(() => { Priority?.Invoke((Task, null)); })">None</button>
                        }
                        <div class="dropdown-divider"></div>
                        @if (Project == TaskService.CompletedTasks)
                        {
                            <button class="dropdown-item" onclick="@(() => { Incomplete?.Invoke(Task); })">
                                <i class="fas fa-redo"></i> Restart
                            </button>
                        }
                        <button class="dropdown-item" onclick="@(() => { Edit?.Invoke(Task); })">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="dropdown-item" onclick="@(() => { Delete?.Invoke(Task); })">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
[Parameter]
private TaskItem Task { get; set; }

[Parameter]
private string Project { get; set; }

[Parameter]
private Action<TaskItem> Complete { get; set; }

[Parameter]
private Action<TaskItem> Incomplete { get; set; }

[Parameter]
private Action<TaskItem> Edit { get; set; }

[Parameter]
private Action<TaskItem> Delete { get; set; }

[Parameter]
private Action<(TaskItem, string)> Priority { get; set; }

private string TaskContextualClass
{
    get
    {
        switch (Task.Priority)
        {
            case "A":
                return "list-group-item-danger";
            case "B":
                return "list-group-item-warning";
            case "C":
                return "list-group-item-info";
            case "D":
                return "list-group-item-primary";
            default:
                return string.Empty;
        }
    }
}
}