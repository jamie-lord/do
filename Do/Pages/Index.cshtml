@page "/"
@using Microsoft.AspNetCore.Blazor.Browser.Interop;
@using System.IO;
@using Models;

<script defer src="js/fontawesome-all.min.js"></script>

<div class="row">
    <div class="col">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand">Do</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <label class="nav-link btn" style="margin-bottom: 0px;" id="import-button">Import<input type="file" style="display: none;"></label>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn" @onclick(Export)>Export</a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="input-group input-group-lg">
            <input type="text" class="form-control" id="taskTextArea" placeholder="Take over the world" @bind(CurrentInput)>
            <div class="input-group-append">
                <button @onclick(ClearInput) class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i>
                </button>
                <button @onclick(AddItem) class="btn btn-outline-primary">@InputButtonText</button>
            </div>
        </div>
    </div>
</div>


@if (TodoItems != null && TodoItems.Any(x => !x.Completed))
{
    <div class="row">
        <div class="col">
            <h1>Your tasks</h1>

            @foreach (var itemsForProject in TodoItems.Where(x => !x.Completed).OrderBy(x => x.Creation).GroupBy(x => x.Project.FirstOrDefault()))
            {
                @if (!string.IsNullOrWhiteSpace(itemsForProject.Key))
                {
                    <h2>@itemsForProject.Key</h2>
                }
                <div class="list-group">
                    @foreach (var item in itemsForProject)
                    {
                        <div class="list-group-item">
                            <div class="container">
                                <div class="row">
                                    <div class="col-md-auto">
                                        <button class="btn btn-outline-success" @onclick(() => { Complete(item); })>
                                            <i class="fas fa-check"></i>
                                        </button>
                                    </div>

                                    <div class="col">
                                        <h4 class="list-group-item-heading">
                                            @item.Body
                                            @if (item.Context != null && item.Context.Count > 0)
                                            {
                                                foreach (var context in item.Context)
                                                {
                                                    <span class="label label-default">@context</span>
                                                }
                                            }
                                        </h4>
                                        <p class="list-group-item-text">
                                            @item.Creation?.ToString("yyyy-MM-dd")
                                        </p>
                                    </div>

                                    <div class="col-md-auto">
                                        <button class="btn btn-outline-secondary" @onclick(() => { Edit(item); })>
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick(() => { Delete(item); })>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@if (TodoItems != null && TodoItems.Any(x => x.Completed))
{
    <div class="row">
        <div class="col">
            <h1>Completed tasks</h1>

            <div class="list-group">
                @foreach (var item in TodoItems.Where(x => x.Completed).OrderBy(x => x.Completion))
                {

                    <div class="list-group-item">
                        <h4 class="list-group-item-heading">@item.Body</h4>
                        <p class="list-group-item-text">
                            @item.Creation?.ToString("yyyy-MM-dd")
                            @if (item.Context != null && item.Context.Count > 0)
                            {
                                foreach (var context in item.Context)
                                {
                                    <span class="label label-default">@context</span>
                                }
                            }
                        </p>
                        <button class="btn btn-outline-secondary" @onclick(() => { Edit(item); })>
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-danger" @onclick(() => { Delete(item); })>
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

<script type="text/javascript" src="js/filesaver-1.3.2.min.js"></script>
<script>
    Blazor.registerFunction('getFromLocal', (key) => {
        return localStorage[key];
    });

    Blazor.registerFunction('storeInLocal', (key, data) => {
        localStorage[key] = data;
        return true;
    });

    Blazor.registerFunction('saveToFile', (content) => {
        var file = new File(content, 'do-' + new Date().toISOString() + '.txt', {
            type: "text/plain;charset=utf-8"
        });
        saveAs(file);
        return true;
    });

    document.getElementById('import-button').addEventListener('change', function () {
        let file = this.children[0].files[0];
        let reader = new FileReader();
        reader.onloadend = function callback(e) {
            let result = e.target.result;
            const assemblyName = 'Do';
            const namespace = 'Do.Pages';
            const typeName = 'Index';
            const methodName = 'Import';

            const importMethod = Blazor.platform.findMethod(
                assemblyName,
                namespace,
                typeName,
                methodName
            );

            let data = Blazor.platform.toDotNetString(result);

            let resultAsDotNetString = Blazor.platform.callMethod(importMethod, null, [data]);
        };
        reader.readAsText(file);
    });
</script>

@functions {
public static List<TaskItem> TodoItems;

public static string CurrentInput { get; set; } = null;

public static TaskItem CurrentItem { get; set; } = null;

public static string InputButtonText { get; private set; } = "Save";

private const string TODO_KEY = "do";

protected override async Task OnInitAsync()
{
    new Task(() =>
    {
        TodoItems = GetTasksFromLocalStorage();
    }).Start();
}

private static void SaveItemsInLocalStorage()
{
    if (TodoItems == null)
    {
        return;
    }
    var s = JsonUtil.Serialize(TodoItems);
    RegisteredFunction.Invoke<bool>("storeInLocal", new object[] { TODO_KEY, s });
}

private static List<TaskItem> GetTasksFromLocalStorage()
{
    var r = RegisteredFunction.Invoke<object>("getFromLocal", new object[] { TODO_KEY });
    if (r == null)
    {
        return new List<TaskItem>();
    }
    try
    {
        return JsonUtil.Deserialize<List<TaskItem>>(r.ToString());
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
        return new List<TaskItem>();
    }
}

public static void AddItem()
{
    InputButtonText = "Save";
    if (CurrentInput == null || string.IsNullOrWhiteSpace(CurrentInput))
    {
        return;
    }
    try
    {
        // Editing existing task
        if (CurrentItem != null)
        {
            CurrentItem.FromLine(CurrentInput);
        }
        // New task
        else
        {
            var t = new TaskItem();
            t.FromLine(CurrentInput);
            t.Creation = DateTime.Now;
            TodoItems.Add(t);
        }
        CurrentInput = null;
        CurrentItem = null;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
    SaveItemsInLocalStorage();
}

public static void Complete(TaskItem item)
{
    item.Complete();
    SaveItemsInLocalStorage();
}

public static void Edit(TaskItem item)
{
    CurrentItem = item;
    CurrentInput = CurrentItem.TodoLine();
    InputButtonText = "Update";
}

public static void Delete(TaskItem item)
{
    try
    {
        if (CurrentItem == item)
        {
            CurrentItem = null;
            CurrentInput = null;
        }
        TodoItems.Remove(item);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
    SaveItemsInLocalStorage();
}

public static void ClearInput()
{
    CurrentInput = null;
    CurrentItem = null;
    InputButtonText = "Save";
}

public static void Import(string fileData)
{
    if (string.IsNullOrWhiteSpace(fileData))
    {
        return;
    }
    var items = new List<TaskItem>();
    using (StringReader reader = new StringReader(fileData))
    {
        string line;
        while (!string.IsNullOrWhiteSpace((line = reader.ReadLine())))
        {
            try
            {
                var i = TodoTxt.Parse(line);
                if (i != null)
                {
                    items.Add(i);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    if (items.Count > 0)
    {
        TodoItems = items;
        SaveItemsInLocalStorage();
    }
}

public static void Export()
{
    if (TodoItems == null || TodoItems.Count < 1)
    {
        return;
    }
    var output = new List<string>();
    foreach (var item in TodoItems)
    {
        var l = item.TodoLine();
        if (!string.IsNullOrWhiteSpace(l))
        {
            output.Add(l + "\n");
        }
    }
    if (output.Count < 1)
    {
        return;
    }
    RegisteredFunction.Invoke<bool>("saveToFile", new object[] { output });
}
}
