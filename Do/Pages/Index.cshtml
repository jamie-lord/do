@page "/"
@using TodoTxtLib;

<h2>Add new task</h2>

<form class="form-inline">
    <div class="form-group">
        <input type="text" class="form-control" id="taskTextArea" placeholder="Take over the world" @bind(NewItem)>
    </div>
    <button @onclick(AddItem) class="btn btn-primary">Save</button>
</form>

@if (TodoItems.Any(x => !x.Completed))
{
    <h1>Your tasks</h1>

    @foreach (var itemsForProject in TodoItems.Where(x => !x.Completed).OrderBy(x => x.Creation).GroupBy(x => x.Project.FirstOrDefault()))
    {
        @if (!string.IsNullOrWhiteSpace(itemsForProject.Key))
        {
            <h2>@itemsForProject.Key</h2>
        }
        <div class="list-group">
            @foreach (var item in itemsForProject)
            {
                <div class="list-group-item">
                    <h4 class="list-group-item-heading">@item.Body</h4>
                    <p class="list-group-item-text">
                        @item.Creation
                        @if (item.Context != null && item.Context.Count > 0)
                        {
                            foreach (var context in item.Context)
                            {
                                <span class="label label-default">@context</span>
                            }
                        }
                    </p>
                    <button class="btn btn-success" @onclick(() => { Complete(item); })><span class="glyphicon glyphicon-ok" aria-hidden="true"></span></button>
                    <button class="btn btn-danger" @onclick(() => { Delete(item); })><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button>
                </div>
            }
        </div>
    }
}

@if (TodoItems.Any(x => x.Completed))
{
    <h1>Completed tasks</h1>

    <div class="list-group">
        @foreach (var item in TodoItems.Where(x => x.Completed).OrderBy(x => x.Completion))
        {

            <div class="list-group-item">
                <h4 class="list-group-item-heading">@item.Body</h4>
                <p class="list-group-item-text">
                    @item.Creation
                    @if (item.Context != null && item.Context.Count > 0)
                    {
                        foreach (var context in item.Context)
                        {
                            <span class="label label-default">@context</span>
                        }
                    }
                </p>
                <button class="btn btn-danger" @onclick(() => { Complete(item); })>Complete</button>
                <button class="btn btn-danger" @onclick(() => { Delete(item); })>Delete</button>
            </div>

        }
    </div>
}

@functions {
private List<TodoItem> _todoItems;

public List<TodoItem> TodoItems
{
    get
    {
        if (_todoItems == null)
        {
            _todoItems = new List<TodoItem>();
        }
        return _todoItems;
    }
    set { _todoItems = value; }
}

public string NewItem { get; set; } = null;

public string Disabled { get; set; } = "disabled";

public void AddItem()
{
    if (NewItem == null || string.IsNullOrWhiteSpace(NewItem))
    {
        return;
    }
    try
    {
        var t = TodoTxt.Parse(NewItem);
        t.Creation = DateTime.Now;
        TodoItems.Add(t);
        NewItem = null;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
}

public void Complete(TodoItem item)
{
    item.Completed = true;
    item.Completion = DateTime.Now;
}

public void Delete(TodoItem item)
{
    try
    {
        TodoItems.Remove(item);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
}
}
