@page "/"
@using Microsoft.JSInterop;
@using System.IO;
@using Models;

<nav id="sidebar" class="@SidebarActive">
    <div class="sidebar-header">
        <h3>Do</h3>
    </div>

    <ul class="list-unstyled components">
        @foreach (string project in Tasks.Projects)
        {
            <li class="@ProjectActive(project)">
                <a href="javascript:void(0)" role="button" onclick="@(() => { SelectProject(project); })">@project</a>
            </li>
        }
    </ul>
</nav>

<div id="content" class="@SidebarActive">
    <div class="row section-row">
        <div class="col">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <button type="button" id="sidebarCollapse" class="btn btn-light" onclick="@SidebarCollapse">
                    <i class="fas fa-align-left"></i>
                </button>

                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav mr-auto">
                        <li class="nav-item">
                            <label class="nav-link btn" style="margin-bottom: 0px;" id="import-button">Import<input type="file" style="display: none;"></label>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link btn" onclick="@Export">Export</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link btn" data-toggle="modal" data-target="#helpModal">Help</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>

    <div class="row section-row">
        <div class="col">
            <div class="input-group input-group-lg">
                <input type="text" class="form-control" id="taskTextArea" placeholder="Take over the world" bind="@CurrentInput" />
                <div class="input-group-append">
                    <button onclick="@ClearInput" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i>
                    </button>
                    <button id="addItemButton" onclick="@AddItem" class="btn btn-outline-primary">@InputButtonText</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row section-row">
        <div class="col">
            @foreach (string project in ProjectsToShow)
            {
                <div class="project-group">
                    @if (!string.IsNullOrWhiteSpace(project) && project != TaskList.NoProject)
                    {
                        <h4 style="display: inline-block;">
                            @project
                            @if (project != TaskList.CompletedTasks)
                            {
                                <small>
                                    <a onclick="@(() => { NewItemForProject(project); })" role="button" href="" style="color: #6c757d;">
                                        <i class="fas fa-plus"></i>
                                    </a>
                                </small>
                            }
                        </h4>
                    }
                    <div class="list-group">
                        @foreach (TaskItem task in Tasks.TasksForProject(project))
                        {
                            <div class="list-group-item">
                                <div class="container-fluid">
                                    <div class="row">
                                        @if (project != TaskList.CompletedTasks)
                                        {
                                            <div class="col-md-auto my-auto col-leading">
                                                <button class="btn btn-complete" onclick="@(() => { Complete(task); })">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            </div>
                                        }

                                        <div class="col">
                                            <p style="margin-bottom: 0;">
                                                @if (!string.IsNullOrWhiteSpace(task.Priority))
                                                {
                                                    <span class="badge badge-primary">@task.Priority</span>
                                                }
                                                @task.Body
                                            </p>
                                            <p class="task-meta">
                                                <small>
                                                    @task.Creation?.ToString("yyyy-MM-dd")
                                                    @if (task.Context != null && task.Context.Count > 0)
                                                    {
                                                        foreach (var context in task.Context)
                                                        {
                                                            <span class="badge badge-secondary">@context</span>
                                                        }
                                                    }
                                                </small>
                                            </p>
                                        </div>

                                        <div class="col-md-auto my-auto col-trailing">
                                            @if (project == TaskList.CompletedTasks)
                                            {
                                                <button class="btn btn-incomplete" onclick="@(() => { Incomplete(task); })">
                                                    <i class="fas fa-redo"></i>
                                                </button>
                                            }
                                            <button class="btn btn-edit" onclick="@(() => { Edit(task); })">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-delete" onclick="@(() => { Delete(task); })">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row section-row">
        <div class="col">
            <p class="text-center"><small>v0.6.0</small></p>
        </div>
    </div>

    <div class="modal fade" id="helpModal" tabindex="-1" role="dialog" aria-labelledby="helpModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">todo.txt format rules</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <img src="img/todo_format.svg" class="img-fluid" alt="todo.txt format">
                    <p>For more information on the todo.txt standard see <a href="https://github.com/todotxt/todo.txt">here</a>.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>

@functions {
public static TaskList Tasks { get; set; } = new TaskList();

public string SidebarActive { get; private set; } = null;

public string CurrentInput { get; set; } = null;

public TaskItem CurrentItem { get; set; } = null;

public string InputButtonText { get; private set; } = "Save";

public string SelectedProject { get; set; } = null;

private const string DoKey = "do";

private const string Active = "active";

protected override async Task OnInitAsync()
{
    await GetTasksFromLocalStorage();
    await JSRuntime.Current.InvokeAsync<bool>("addEventListeners");
}

public void SidebarCollapse()
{
    if (SidebarActive == Active)
    {
        SidebarActive = null;
    }
    else
    {
        SidebarActive = Active;
    }
}

public IEnumerable<string> ProjectsToShow
{
    get
    {
        List<string> projects = new List<string>();
        if (SelectedProject != null)
        {
            projects.Add(SelectedProject);
        }
        else
        {
            foreach (string project in Tasks.Projects)
            {
                if (project == TaskList.CompletedTasks)
                {
                    continue;
                }
                projects.Add(project);
            }
        }
        return projects;
    }
}

public string ProjectActive(string project)
{
    if (project == SelectedProject)
    {
        return Active;
    }
    return null;
}

public void SelectProject(string project)
{
    // Project is currently selected and should be set to no project to display all projects.
    if (project == SelectedProject)
    {
        SelectedProject = null;
    }
    else
    {
        SelectedProject = project;
    }
    StateHasChanged();
}

private static async Task SaveItemsInLocalStorage()
{
    string json = Tasks.JsonString;
    if (!string.IsNullOrWhiteSpace(json))
    {
        await JSRuntime.Current.InvokeAsync<bool>("storeInLocal", new object[] { DoKey, json });
    }
}

private async Task GetTasksFromLocalStorage()
{
    object json = await JSRuntime.Current.InvokeAsync<object>("getFromLocal", new object[] { DoKey });
    Tasks.SetTasks(json);
}

public async void NewItemForProject(string project)
{
    ClearInput();
    CurrentInput = $" +{project}";
    await JSRuntime.Current.InvokeAsync<bool>("focusOnInputField");
    await JSRuntime.Current.InvokeAsync<bool>("setCursorOnBeginningOfInputField");
}

public async void AddItem()
{
    InputButtonText = "Save";
    if (CurrentInput == null || string.IsNullOrWhiteSpace(CurrentInput))
    {
        return;
    }
    try
    {
        // Editing existing task
        if (CurrentItem != null)
        {
            CurrentItem.FromLine(CurrentInput);
        }
        // New task
        else
        {
            TaskItem task = new TaskItem();
            task.FromLine(CurrentInput);
            task.Creation = DateTime.Now;
            Tasks.Add(task);
        }
        CurrentInput = null;
        CurrentItem = null;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
    await SaveItemsInLocalStorage();
}

public async void Complete(TaskItem item)
{
    item.Complete();
    await SaveItemsInLocalStorage();

    if (!Tasks.HasIncompleteTasks)
    {
        SelectProject(null);
    }
}

public async void Incomplete(TaskItem item)
{
    item.Incomplete();
    await SaveItemsInLocalStorage();

    if (!Tasks.HasCompleteTasks)
    {
        SelectProject(null);
    }
}

public async void Edit(TaskItem item)
{
    CurrentItem = item;
    CurrentInput = CurrentItem.TodoLine();
    InputButtonText = "Update";
    await JSRuntime.Current.InvokeAsync<bool>("focusOnInputField");
}

public async void Delete(TaskItem item)
{
    try
    {
        if (CurrentItem == item)
        {
            CurrentItem = null;
            CurrentInput = null;
        }
        Tasks.Remove(item);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
    await SaveItemsInLocalStorage();

    if (!Tasks.HasAnyTasks)
    {
        SelectProject(null);
    }
}

public void ClearInput()
{
    CurrentInput = null;
    CurrentItem = null;
    InputButtonText = "Save";
}

[JSInvokable]
public static async void Import(string fileData)
{
    if (string.IsNullOrWhiteSpace(fileData))
    {
        return;
    }

    var items = new List<TaskItem>();
    using (StringReader reader = new StringReader(fileData))
    {
        string line;
        while (!string.IsNullOrWhiteSpace((line = reader.ReadLine())))
        {
            try
            {
                var i = TodoTxt.Parse(line);
                if (i != null)
                {
                    items.Add(i);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    if (items.Count > 0)
    {
        Tasks.SetTasks(items);
        await SaveItemsInLocalStorage();
        await JSRuntime.Current.InvokeAsync<bool>("reload");
    }
}

public async void Export()
{
    List<string> output = Tasks.Export();
    if (output != null)
    {
        await JSRuntime.Current.InvokeAsync<bool>("saveToFile", new object[] { output });
    }
}
}
