@page "/"
@using Microsoft.AspNetCore.Blazor.Browser.Interop;
@using Models;

<h2>Add new task</h2>

<div class="row">
    <div class="col-lg-12">
        <div class="input-group input-group-lg">
            <input type="text" class="form-control input-lg" id="taskTextArea" placeholder="Take over the world" @bind(CurrentInput)>
            <span class="input-group-btn">
                <button @onclick(ClearInput) class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                <button @onclick(AddItem) class="btn btn-primary">@InputButtonText</button>
            </span>
        </div>
    </div>
</div>

@if (TodoItems.Any(x => !x.Completed))
{
    <h1>Your tasks</h1>

    @foreach (var itemsForProject in TodoItems.Where(x => !x.Completed).OrderBy(x => x.Creation).GroupBy(x => x.Project.FirstOrDefault()))
    {
        @if (!string.IsNullOrWhiteSpace(itemsForProject.Key))
        {
            <h2>@itemsForProject.Key</h2>
        }
        <div class="list-group">
            @foreach (var item in itemsForProject)
            {
                <div class="list-group-item">
                    <h4 class="list-group-item-heading">@item.Body</h4>
                    <p class="list-group-item-text">
                        @item.Creation?.ToString("yyyy-MM-dd")
                        @if (item.Context != null && item.Context.Count > 0)
                        {
                            foreach (var context in item.Context)
                            {
                                <span class="label label-default">@context</span>
                            }
                        }
                    </p>
                    <button class="btn btn-success" @onclick(() => { Complete(item); })><span class="glyphicon glyphicon-ok" aria-hidden="true"></span></button>
                    <button class="btn btn-default" @onclick(() => { Edit(item); })><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></button>
                    <button class="btn btn-danger" @onclick(() => { Delete(item); })><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button>
                </div>
            }
        </div>
    }
}

@if (TodoItems.Any(x => x.Completed))
{
    <h1>Completed tasks</h1>

    <div class="list-group">
        @foreach (var item in TodoItems.Where(x => x.Completed).OrderBy(x => x.Completion))
        {

            <div class="list-group-item">
                <h4 class="list-group-item-heading">@item.Body</h4>
                <p class="list-group-item-text">
                    @item.Creation?.ToString("yyyy-MM-dd")
                    @if (item.Context != null && item.Context.Count > 0)
                    {
                        foreach (var context in item.Context)
                        {
                            <span class="label label-default">@context</span>
                        }
                    }
                </p>
                <button class="btn btn-default" @onclick(() => { Edit(item); })><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></button>
                <button class="btn btn-danger" @onclick(() => { Delete(item); })><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button>
            </div>

        }
    </div>
}

<button @onclick(GetItems)>Update</button>

<script>
    Blazor.registerFunction('getFromLocal', (key) => {
        return localStorage[key];
    });

    Blazor.registerFunction('storeInLocal', (key, data) => {
        localStorage[key] = data;
        return true;
    });
</script>

@functions {
    private List<TaskItem> _todoItems;

    public List<TaskItem> TodoItems
    {
        get
        {
            if (_todoItems == null)
            {
                _todoItems = new List<TaskItem>();
            }
            return _todoItems;
        }
    }

    public string CurrentInput { get; set; } = null;

    public TaskItem CurrentItem { get; set; } = null;

    public string InputButtonText { get; private set; } = "Save";

    private const string TODO_KEY = "do";

    public void StoreItems()
    {
        var s = JsonUtil.Serialize(TodoItems);
        RegisteredFunction.Invoke<bool>("storeInLocal", new object[] { TODO_KEY, s });
    }

    public void GetItems()
    {
        var r = RegisteredFunction.Invoke<object>("getFromLocal", new object[] { TODO_KEY });
        if (r == null)
        {
            return;
        }
        var s = JsonUtil.Deserialize<List<TaskItem>>(r.ToString());
        _todoItems = s;
    }

    public void AddItem()
    {
        InputButtonText = "Save";
        if (CurrentInput == null || string.IsNullOrWhiteSpace(CurrentInput))
        {
            return;
        }
        try
        {
            // Editing existing task
            if (CurrentItem != null)
            {
                CurrentItem.FromLine(CurrentInput);
            }
            // New task
            else
            {
                var t = new TaskItem();
                t.FromLine(CurrentInput);
                t.Creation = DateTime.Now;
                TodoItems.Add(t);
            }
            CurrentInput = null;
            CurrentItem = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        StoreItems();
    }

    public void Complete(TaskItem item)
    {
        item.Complete();
        StoreItems();
    }

    public void Edit(TaskItem item)
    {
        CurrentItem = item;
        CurrentInput = CurrentItem.TodoLine();
        InputButtonText = "Update";
    }

    public void Delete(TaskItem item)
    {
        try
        {
            if (CurrentItem == item)
            {
                CurrentItem = null;
                CurrentInput = null;
            }
            TodoItems.Remove(item);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        StoreItems();
    }

    public void ClearInput()
    {
        CurrentInput = null;
        CurrentItem = null;
        InputButtonText = "Save";
    }
}
