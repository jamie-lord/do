@page "/"
@using Microsoft.JSInterop;
@using System.IO;
@using Models;
@using Services
@inject TaskService Tasks

<nav id="sidebar" class="@SidebarActive">
    <div class="sidebar-header">
        <h3>Do</h3>
    </div>

    @if (Tasks.Projects.Any())
    {
        <ul class="list-unstyled components">
            @foreach (string project in Tasks.Projects)
            {
                <li class="@ProjectActive(project)">
                    <a role="button" onclick="@(async () => { await SelectProject(project); })">@project</a>
                </li>
            }
        </ul>
    }

    <ul class="list-unstyled components">
        <li>
            <label style="margin-bottom: 0px;" id="import-button">Import<input type="file" style="display: none;"></label>
        </li>
        @if (Tasks.HasAnyTasks)
        {
            <li>
                <a onclick="@Export">Export</a>
            </li>
        }
        <li>
            <a data-toggle="modal" data-target="#helpModal">Help</a>
        </li>
    </ul>

    <p class="version-number"><small>v0.10.1</small></p>
</nav>

<div id="content" class="@SidebarActive">
    <div class="row section-row">
        <div class="col">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <button type="button" id="sidebarCollapse" class="btn btn-light" onclick="@SidebarCollapse">
                    <i class="fas fa-align-left"></i>
                </button>
            </nav>
        </div>
    </div>

    <div class="row section-row">
        <div class="col">
            <div class="input-group input-group-lg">
                <input type="text" class="form-control" id="taskTextArea" placeholder="Take over the world" bind="@CurrentInput" />
                <div class="input-group-append">
                    <button onclick="@ClearInput" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i>
                    </button>
                    <button id="addItemButton" onclick="@AddItem" class="btn btn-outline-primary">@InputButtonText</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            @foreach (string project in ProjectsToShow)
            {
                <div class="project-group">
                    @if (!string.IsNullOrWhiteSpace(project) && project != TaskService.NoProject)
                    {
                        <h4 style="display: inline-block;">
                            @project
                            @if (project != TaskService.CompletedTasks)
                            {
                                <small>
                                    <a onclick="@(() => { NewItemForProject(project); })" role="button" href="" style="color: #6c757d;">
                                        <i class="fas fa-plus"></i>
                                    </a>
                                </small>
                            }
                        </h4>
                    }
                    <div class="list-group">
                        @foreach (TaskItem task in Tasks.TasksForProject(project))
                        {
                            <TaskComponent Task="@task" Project="@project" Complete="@((t) => Complete(t))" Incomplete="@((t) => Incomplete(t))" Edit="@((t) => Edit(t))" Delete="@((t) => Delete(t))" Priority="@((p) => SetTaskPriority(p))" />
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="modal fade" id="helpModal" tabindex="-1" role="dialog" aria-labelledby="helpModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">todo.txt format rules</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <img src="img/todo_format.svg" class="img-fluid" alt="todo.txt format">
                    <p>For more information on the todo.txt standard see <a href="https://github.com/todotxt/todo.txt">here</a>.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>

@functions {
public string SidebarActive { get; private set; } = null;

public string CurrentInput { get; set; } = null;

public TaskItem CurrentItem { get; set; } = null;

public string InputButtonText { get; private set; } = "Save";

public string SelectedProject { get; set; } = null;

private const string Active = "active";

protected override async Task OnInitAsync()
{
    await Tasks.Init();
    await JSRuntime.Current.InvokeAsync<bool>("addEventListeners", new object[] { new DotNetObjectRef(this) });
    await UpdatePageTitle();
}

public void SidebarCollapse()
{
    if (SidebarActive == Active)
    {
        SidebarActive = null;
    }
    else
    {
        SidebarActive = Active;
    }
}

private async Task UpdatePageTitle()
{
    int taskCount = 0;

    string title = "Do";
    bool showingCompletedTasks = false;

    foreach (var project in ProjectsToShow)
    {
        taskCount = taskCount + Tasks.TasksForProject(project).Count();

        if (project == TaskService.CompletedTasks)
        {
            showingCompletedTasks = true;
        }
    }

    if (taskCount > 0)
    {
        if (taskCount == 1)
        {
            title = $"{taskCount} Task";
        }
        else if (taskCount > 1)
        {
            title = $"{taskCount} Tasks";
        }

        if (showingCompletedTasks)
        {
            title += " Done";
        }
        else
        {
            title += " To Do";
        }
    }

    await JSRuntime.Current.InvokeAsync<object>("setPageTitle", new object[] { title });
}

public IEnumerable<string> ProjectsToShow
{
    get
    {
        List<string> projects = new List<string>();
        if (SelectedProject != null)
        {
            projects.Add(SelectedProject);
        }
        else
        {
            foreach (string project in Tasks.Projects)
            {
                if (project == TaskService.CompletedTasks)
                {
                    continue;
                }
                projects.Add(project);
            }
        }
        return projects;
    }
}

public string ProjectActive(string project)
{
    if (project == SelectedProject)
    {
        return Active;
    }
    return null;
}

public async Task SelectProject(string project)
{
    // Project is currently selected and should be set to no project to display all projects.
    if (project == SelectedProject)
    {
        SelectedProject = null;
    }
    else
    {
        SelectedProject = project;
    }
    await UpdatePageTitle();
    StateHasChanged();
}

public async void NewItemForProject(string project)
{
    ClearInput();
    CurrentInput = $" +{project}";
    await JSRuntime.Current.InvokeAsync<bool>("focusOnInputField");
    await JSRuntime.Current.InvokeAsync<bool>("setCursorOnBeginningOfInputField");
}

public async void AddItem()
{
    InputButtonText = "Save";
    if (CurrentInput == null || string.IsNullOrWhiteSpace(CurrentInput))
    {
        return;
    }
    try
    {
        // Editing existing task
        if (CurrentItem != null)
        {
            CurrentItem.FromLine(CurrentInput);
        }
        // New task
        else
        {
            TaskItem task = new TaskItem();
            task.FromLine(CurrentInput);
            task.Creation = DateTime.Now;
            await Tasks.Add(task);
        }
        CurrentInput = null;
        CurrentItem = null;
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }
    await UpdatePageTitle();
    await JSRuntime.Current.InvokeAsync<bool>("focusOnInputField");
    StateHasChanged();
}

public async void Complete(TaskItem task)
{
    await Tasks.CompleteTask(task);

    if (!Tasks.HasIncompleteTasks)
    {
        await SelectProject(null);
    }

    await UpdatePageTitle();
    await JSRuntime.Current.InvokeAsync<bool>("looseFocus");
    StateHasChanged();
}

public async void Incomplete(TaskItem task)
{
    await Tasks.IncompleteTask(task);

    if (!Tasks.HasCompleteTasks)
    {
        await SelectProject(null);
    }

    await UpdatePageTitle();
    await JSRuntime.Current.InvokeAsync<bool>("looseFocus");
    StateHasChanged();
}

public async void SetTaskPriority((TaskItem, string) p)
{
    await Tasks.SetTaskPriority(p.Item1, p.Item2);
}

public async void Edit(TaskItem item)
{
    CurrentItem = item;
    CurrentInput = CurrentItem.TodoLine();
    InputButtonText = "Update";
    await JSRuntime.Current.InvokeAsync<bool>("focusOnInputField");
    StateHasChanged();
}

public async void Delete(TaskItem item)
{
    try
    {
        if (CurrentItem == item)
        {
            CurrentItem = null;
            CurrentInput = null;
        }
        await Tasks.Remove(item);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex);
    }

    if (!Tasks.HasAnyTasks)
    {
        await SelectProject(null);
    }

    await UpdatePageTitle();
    await JSRuntime.Current.InvokeAsync<bool>("looseFocus");
    StateHasChanged();
}

public async void ClearInput()
{
    CurrentInput = null;
    CurrentItem = null;
    InputButtonText = "Save";
    await JSRuntime.Current.InvokeAsync<bool>("looseFocus");
}

[JSInvokable]
public async void Import(string fileData)
{
    if (string.IsNullOrWhiteSpace(fileData))
    {
        return;
    }

    var items = new List<TaskItem>();
    using (StringReader reader = new StringReader(fileData))
    {
        string line;
        while (!string.IsNullOrWhiteSpace((line = reader.ReadLine())))
        {
            try
            {
                var i = TodoTxt.Parse(line);
                if (i != null)
                {
                    items.Add(i);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    if (items.Count > 0)
    {
        await Tasks.SetTasks(items);
        await SelectProject(null);
        StateHasChanged();
    }
}

public async void Export()
{
    List<string> output = Tasks.Export();
    if (output != null)
    {
        await JSRuntime.Current.InvokeAsync<bool>("saveToFile", new object[] { output });
    }
}
}
