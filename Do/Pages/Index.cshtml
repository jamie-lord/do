@page "/"
@using Microsoft.JSInterop;
@using System.IO;
@using Models;

<div class="row section-row">
    <div class="col">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand">Do</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <label class="nav-link btn" style="margin-bottom: 0px;" id="import-button">Import<input type="file" style="display: none;"></label>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn" onclick="@Export">Export</a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="input-group input-group-lg">
            <input type="text" class="form-control" id="taskTextArea" placeholder="Take over the world" bind="@CurrentInput" />
            <div class="input-group-append">
                <button onclick="@ClearInput" class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i>
                </button>
                <button onclick="@AddItem" class="btn btn-outline-primary">@InputButtonText</button>
            </div>
        </div>
    </div>
</div>


@if (TodoItems != null && TodoItems.Any(x => !x.Completed))
{
    <div class="row section-row">
        <div class="col">
            <h1>Your tasks</h1>

            @foreach (var itemsForProject in TodoItems.Where(x => !x.Completed).OrderBy(x => x.Creation).GroupBy(x => x.Project.FirstOrDefault()))
            {
                <div class="project-group">
                    @if (!string.IsNullOrWhiteSpace(itemsForProject.Key))
                    {
                        <h2>@itemsForProject.Key</h2>
                    }
                    <div class="list-group">
                        @foreach (var item in itemsForProject)
                        {
                            <div class="list-group-item">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-md-auto my-auto">
                                            <button class="btn btn-outline-success" onclick="@(() => { Complete(item); })">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        </div>

                                        <div class="col">
                                            <h4>
                                                @if (!string.IsNullOrWhiteSpace(item.Priority))
                                                {
                                                    <span class="badge badge-primary">@item.Priority</span>
                                                }
                                                @item.Body
                                            </h4>
                                            <p class="task-meta">
                                                @item.Creation?.ToString("yyyy-MM-dd")
                                                @if (item.Context != null && item.Context.Count > 0)
                                                {
                                                    foreach (var context in item.Context)
                                                    {
                                                        <span class="badge badge-secondary">@context</span>
                                                    }
                                                }
                                            </p>
                                        </div>

                                        <div class="col-md-auto my-auto">
                                            <button class="btn btn-outline-secondary" onclick="@(() => { Edit(item); })">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" onclick="@(() => { Delete(item); })">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (TodoItems != null && TodoItems.Any(x => x.Completed))
{
    <div class="row section-row">
        <div class="col">
            <h1>Completed tasks</h1>

            <div class="list-group">
                @foreach (var item in TodoItems.Where(x => x.Completed).OrderByDescending(x => x.Completion))
                {
                    <div class="list-group-item">
                        <div class="container">
                            <div class="row">
                                <div class="col">
                                    <h4>
                                        @if (!string.IsNullOrWhiteSpace(item.Priority))
                                        {
                                            <span class="badge badge-primary">@item.Priority</span>
                                        }
                                        @item.Body
                                    </h4>
                                    <p class="task-meta">
                                        @item.Creation?.ToString("yyyy-MM-dd")
                                        @item.Completion?.ToString("yyyy-MM-dd")
                                        @if (item.Context != null && item.Context.Count > 0)
                                        {
                                            foreach (var context in item.Context)
                                            {
                                                <span class="badge badge-secondary">@context</span>
                                            }
                                        }
                                    </p>
                                </div>

                                <div class="col-md-auto my-auto">
                                    <button class="btn btn-outline-secondary" onclick="@(() => { Edit(item); })">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="@(() => { Delete(item); })">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@functions {
    public static List<TaskItem> TodoItems;

    public string CurrentInput { get; set; } = null;

    public TaskItem CurrentItem { get; set; } = null;

    public string InputButtonText { get; private set; } = "Save";

    private const string TODO_KEY = "do";

    protected override async Task OnInitAsync()
    {
        TodoItems = await GetTasksFromLocalStorage();

        await JSRuntime.Current.InvokeAsync<bool>("addImportListener");
    }

    private static async void SaveItemsInLocalStorage()
    {
        if (TodoItems == null)
        {
            return;
        }
        var s = Json.Serialize(TodoItems);
        await JSRuntime.Current.InvokeAsync<bool>("storeInLocal", new object[] { TODO_KEY, s });
    }

    private async Task<List<TaskItem>> GetTasksFromLocalStorage()
    {
        var r = await JSRuntime.Current.InvokeAsync<object>("getFromLocal", new object[] { TODO_KEY });
        if (r == null)
        {
            return new List<TaskItem>();
        }
        try
        {
            return Json.Deserialize<List<TaskItem>>(r.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return new List<TaskItem>();
        }
    }

    public void AddItem()
    {
        InputButtonText = "Save";
        if (CurrentInput == null || string.IsNullOrWhiteSpace(CurrentInput))
        {
            return;
        }
        try
        {
            // Editing existing task
            if (CurrentItem != null)
            {
                CurrentItem.FromLine(CurrentInput);
            }
            // New task
            else
            {
                var t = new TaskItem();
                t.FromLine(CurrentInput);
                t.Creation = DateTime.Now;
                TodoItems.Add(t);
            }
            CurrentInput = null;
            CurrentItem = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        SaveItemsInLocalStorage();
    }

    public void Complete(TaskItem item)
    {
        item.Complete();
        SaveItemsInLocalStorage();
    }

    public void Edit(TaskItem item)
    {
        CurrentItem = item;
        CurrentInput = CurrentItem.TodoLine();
        InputButtonText = "Update";
    }

    public void Delete(TaskItem item)
    {
        try
        {
            if (CurrentItem == item)
            {
                CurrentItem = null;
                CurrentInput = null;
            }
            TodoItems.Remove(item);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        SaveItemsInLocalStorage();
    }

    public void ClearInput()
    {
        CurrentInput = null;
        CurrentItem = null;
        InputButtonText = "Save";
    }

    [JSInvokable]
    public static void Import(string fileData)
    {
        if (string.IsNullOrWhiteSpace(fileData))
        {
            return;
        }

        var items = new List<TaskItem>();
        using (StringReader reader = new StringReader(fileData))
        {
            string line;
            while (!string.IsNullOrWhiteSpace((line = reader.ReadLine())))
            {
                try
                {
                    var i = TodoTxt.Parse(line);
                    if (i != null)
                    {
                        items.Add(i);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
        }
        if (items.Count > 0)
        {
            TodoItems = items;
            SaveItemsInLocalStorage();
        }
    }

    public async void Export()
    {
        if (TodoItems == null || TodoItems.Count < 1)
        {
            return;
        }

        var output = new List<string>();
        foreach (var item in TodoItems.OrderBy(x => x.Creation))
        {
            var l = item.TodoLine();
            if (!string.IsNullOrWhiteSpace(l))
            {
                output.Add(l + "\n");
            }
        }
        if (output.Count < 1)
        {
            return;
        }
        await JSRuntime.Current.InvokeAsync<bool>("saveToFile", new object[] { output });
    }
}
